define dns::zone (
  $soa = "${::fqdn}.",
  $soa_email = "root.${::fqdn}.",
  ## drop support for manual serial-zone management
  # $serial = false,
  $zone_ttl = '604800',
  $zone_refresh = '604800',
  $zone_retry = '86400',
  $zone_expire = '2419200',
  $zone_minimum = '604800',
  $nameservers = [ $::fqdn ],
  $reverse = false,
  $zone_type = 'master',
  $slave_masters = undef,
  $zone_notify = false,
  $ensure = present
) {

## All changes of serial zone make in automatic mode
#
#  $zone_serial = $serial ? {
#    false   => inline_template('<%= Time.now.to_i %>'),
#    default => $serial
#  }

  $zone = $reverse ? {
    true    => "${name}.in-addr.arpa",
    default => $name
  }

  $zone_file = "/etc/bind/db.${name}"
  $zone_file_data = "${zone_file}.data"

  if $ensure == absent {
    file { $zone_file:
      ensure => absent,
    }
    } else {

      # Splitting zone file on two parts: zone-soa (soa record) and zone-data (all other records).
      # This is to update zone_serial only by need (then zone-data updated).

      # Zone file (SOA-part)
      $zone_soa = template("${module_name}/zone-soa.erb")

      exec { "soa-${zone}":
        command     => "echo \'$zone_soa\' > \'$zone_file\'",
        path        => ["/bin", "/sbin", "/usr/bin", "/usr/sbin"],
        refreshonly => true,
        require     => Class['dns::server::install'],
        notify      => Class['dns::server::service'],
        environment => ['TTL=$TTL', 'INCLUDE=$INCLUDE', 'ORIGIN=$ORIGIN'], # for correct work on Ubuntu 12.04 with provider => shell
        provider    => shell # for correct work on Debian Squeeze

      }
      # Set correct rights on file generated by exec{soa-$zone:}
      file { $zone_file:
        ensure    => file,
        owner     => 'bind',
        group     => 'bind',
        mode      => 0644,
        require   => Class['dns::server::install'],
      }

      # Generate ${zone_name}.data file for static zones and request refresh exec on changes
      concat { $zone_file_data:
        owner   => 'bind',
        group   => 'bind',
        mode    => '644',
        require => Class['dns::server::install'],
        notify  => Exec["soa-${zone}"],
      }

      concat::fragment{"db.${zone}.data-header":
        target  => $zone_file_data,
        order   => 1,
        content => template("${module_name}/zone-data-header.erb")
      }

    }

    # Include Zone in named.conf.local
    concat::fragment{"named.conf.local.${name}.include":
      ensure  => $ensure,
      target  => '/etc/bind/named.conf.local',
      order   => 2,
      content => template("${module_name}/zone.erb")
    }

}
